#include <iostream>

class TreeNode {
public:
    int data;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int value) {
        data = value;
        left = nullptr;
        right = nullptr;
    }
};

class BinarySearchTree {
public:
    BinarySearchTree() {
        root = nullptr;
    }

    void insert(int value) {
        root = insertRec(root, value);
    }

    void remove(int value) {
        root = removeRec(root, value);
    }

    bool search(int value) {
        return searchRec(root, value);
    }

    void inorderTraversal() {
        inorderTraversalRec(root);
    }

private:
    TreeNode* root;

    TreeNode* insertRec(TreeNode* root, int value) {
        if (root == nullptr) {
            return new TreeNode(value);
        }

        if (value < root->data) {
            root->left = insertRec(root->left, value);
        } else if (value > root->data) {
            root->right = insertRec(root->right, value);
        }

        return root;
    }

    TreeNode* removeRec(TreeNode* root, int value) {
        if (root == nullptr) {
            return root;
        }

        if (value < root->data) {
            root->left = removeRec(root->left, value);
        } else if (value > root->data) {
            root->right = removeRec(root->right, value);
        } else {
            if (root->left == nullptr) {
                TreeNode* temp = root->right;
                delete root;
                return temp;
            } else if (root->right == nullptr) {
                TreeNode* temp = root->left;
                delete root;
                return temp;
            }

            TreeNode* temp = minValueNode(root->right);
            root->data = temp->data;
            root->right = removeRec(root->right, temp->data);
        }

        return root;
    }

    bool searchRec(TreeNode* root, int value) {
        if (root == nullptr) {
            return false;
        }

        if (value == root->data) {
            return true;
        }

        if (value < root->data) {
            return searchRec(root->left, value);
        } else {
            return searchRec(root->right, value);
        }
    }

    TreeNode* minValueNode(TreeNode* root) {
        TreeNode* current = root;
        while (current && current->left != nullptr) {
            current = current->left;
        }
        return current;
    }

    void inorderTraversalRec(TreeNode* root) {
        if (root != nullptr) {
            inorderTraversalRec(root->left);
            std::cout << root->data << " ";
            inorderTraversalRec(root->right);
        }
    }
};

int main() {
    BinarySearchTree bst;

    bst.insert(50);
    bst.insert(30);
    bst.insert(70);
    bst.insert(20);
    bst.insert(40);
    bst.insert(60);
    bst.insert(80);

    std::cout << "Inorder Traversal: ";
    bst.inorderTraversal();
    std::cout << std::endl;

    int valueToSearch = 60;
    if (bst.search(valueToSearch)) {
        std::cout << valueToSearch << " found in the BST." << std::endl;
    } else {
        std::cout << valueToSearch << " not found in the BST." << std::endl;
    }

    int valueToRemove = 30;
    bst.remove(valueToRemove);

    std::cout << "Inorder Traversal after removing " << valueToRemove << ": ";
    bst.inorderTraversal();
    std::cout << std::endl;

    return 0;
}
