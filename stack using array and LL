//using ARRAY

#include <iostream>
using namespace std;

int stack[100], i, j, choice = 0, n, top = -1;

void push();
void pop();
void show();

int main() {
    cout << "Enter the number of elements in the stack: ";
    cin >> n;
    cout << "*********Stack operations using array*********";
    cout << "\n----------------------------------------------\n";

    while (choice != 4) {
        cout << "Choose one from the below options...\n";
        cout << "\n1. Push\n2. Pop\n3. Show\n4. Exit";
        cout << "\nEnter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1: push(); break;
            case 2: pop(); break;
            case 3: show(); break;
            case 4: cout << "Exiting...."; break;
            default: cout << "Please Enter a valid choice";
        }
    }
    return 0;
}

void push() {
    int val;
    if (top == n - 1)
        cout << "\nOverflow";
    else {
        cout << "Enter the value: ";
        cin >> val;
        top = top + 1;
        stack[top] = val;
    }
}

void pop() {
    if (top == -1)
        cout << "Underflow";
    else
        top = top - 1;
}

void show() {
    for (i = top; i >= 0; i--) {
        cout << stack[i] << endl;
    }
    if (top == -1) {
        cout << "Stack is empty";
    }
}



//using LINKED LIST

#include <iostream>
using namespace std;

// Structure to create a node with data and next pointer
struct Node {
    int data;
    struct Node *next;
};

Node* top = NULL;

// Push() operation on a stack
void push(int value) {
    struct Node *newNode = new Node;
    newNode->data = value; // assign value to the node
    if (top == NULL) {
        newNode->next = NULL;
    } else {
        newNode->next = top; // Make the node as top
    }
    top = newNode; // top always points to the newly created node
    cout << "Node is Inserted\n\n";
}

int pop() {
    if (top == NULL) {
        cout << "\nStack Underflow\n";
    } else {
        struct Node *temp = top;
        int temp_data = top->data;
        top = top->next;
        delete temp;
        return temp_data;
    }
}

void display() {
    // Display the elements of the stack
    if (top == NULL) {
        cout << "\nStack Underflow\n";
    } else {
        cout << "The stack is \n";
        struct Node *temp = top;
        while (temp->next != NULL) {
            cout << temp->data << "--->";
            temp = temp->next;
        }
        cout << temp->data << "--->NULL\n\n";
    }
}

int main() {
    int choice, value;
    cout << "\nImplementation of Stack using Linked List\n";
    while (true) {
        cout << "1. Push\n2. Pop\n3. Display\n4. Exit\n";
        cout << "\nEnter your choice : ";
        cin >> choice;
        switch (choice) {
            case 1:
                cout << "\nEnter the value to insert: ";
                cin >> value;
                push(value);
                break;
            case 2:
                cout << "Popped element is: " << pop() << "\n";
                break;
            case 3:
                display();
                break;
            case 4:
                exit(0);
                break;
            default:
                cout << "\nWrong Choice\n";
        }
    }
}
