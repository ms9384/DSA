#include <iostream>
#include <vector>

class BinaryTree {
private:
    std::vector<int> tree;
public:
    BinaryTree() {
        // Initialize an empty binary tree
        tree.clear();
    }

    void insert(int value) {
        // Insert a value into the binary tree
        tree.push_back(value);
    }

    void display() {
        // Display the elements of the binary tree
        for (int value : tree) {
            std::cout << value << " ";
        }
        std::cout << std::endl;
    }

    int getRoot() {
        // Get the root element of the binary tree
        if (!tree.empty()) {
            return tree[0];
        }
        return -1; // Return -1 if the tree is empty
    }

    int getLeftChild(int index) {
        // Get the left child of a node at the given index
        int leftChildIndex = 2 * index + 1;
        if (leftChildIndex < tree.size()) {
            return tree[leftChildIndex];
        }
        return -1; // Return -1 if the left child doesn't exist
    }

    int getRightChild(int index) {
        // Get the right child of a node at the given index
        int rightChildIndex = 2 * index + 2;
        if (rightChildIndex < tree.size()) {
            return tree[rightChildIndex];
        }
        return -1; // Return -1 if the right child doesn't exist
    }
};

int main() {
    BinaryTree tree;

    tree.insert(1);
    tree.insert(2);
    tree.insert(3);
    tree.insert(4);
    tree.insert(5);

    std::cout << "Binary Tree: ";
    tree.display();

    std::cout << "Root: " << tree.getRoot() << std::endl;
    std::cout << "Left child of root: " << tree.getLeftChild(0) << std::endl;
    std::cout << "Right child of root: " << tree.getRightChild(0) << std::endl;

    return 0;
}
