#include <iostream>

#define MAX_VERTICES 100

int graph[MAX_VERTICES][MAX_VERTICES];
int numVertices = 0;

void initGraph(int num) {
    if (num <= MAX_VERTICES) {
        numVertices = num;
        for (int i = 0; i < numVertices; i++) {
            for (int j = 0; j < numVertices; j++) {
                graph[i][j] = 0;
            }
        }
    } else {
        std::cout << "Exceeded maximum number of vertices." << std::endl;
    }
}

void addEdge(int from, int to) {
    if (from < 0 || from >= numVertices || to < 0 || to >= numVertices) {
        std::cout << "Invalid vertex." << std::endl;
    } else {
        graph[from][to] = 1;
        // For an undirected graph, you can add the following line:
        // graph[to][from] = 1;
    }
}

void printGraph() {
    if (numVertices <= 0) {
        std::cout << "Graph is empty." << std::endl;
    } else {
        std::cout << "Adjacency Matrix:" << std::endl;
        for (int i = 0; i < numVertices; i++) {
            for (int j = 0; j < numVertices; j++) {
                std::cout << graph[i][j] << " ";
            }
            std::cout << std::endl;
        }
    }
}

int main() {
    initGraph(5); // Initialize a graph with 5 vertices

    addEdge(0, 1);
    addEdge(0, 2);
    addEdge(1, 3);
    addEdge(2, 4);

    printGraph();

    return 0;
}
